"Create a professional, modern, and fully functional **Task Management System** using the following technologies:  - **Next.js** (for server-side rendering and routing)  - **React.js** (for building interactive UI components)  - **Tailwind CSS** (for styling with a utility-first approach)  - **TypeScript** (for type safety and better code maintainability)  ### **Requirements:**#### **1. UI/UX Design:**- Ensure a **high-quality, modern, and responsive design** with a clean and intuitive user interface.- Use **Tailwind CSS** to create a visually appealing layout with smooth animations and transitions.- Implement a **dark mode toggle** that switches between light and dark themes seamlessly.- Design a **sidebar** for navigation with collapsible sections for better usability on smaller screens.- Use **icons** and **typography** effectively to enhance readability and aesthetics.#### **2. Essential Features:**- **Task Creation:** Allow users to create tasks with a title, description, due date, priority level (low, medium, high), and tags/categories.- **Task List:** Display tasks in a well-organized list or grid layout with sorting options (by date, priority, or status).- **Task Status:** Include options to mark tasks as "To Do," "In Progress," or "Completed."- **Task Editing:** Enable users to edit task details after creation.- **Task Deletion:** Allow users to delete tasks with a confirmation modal.- **Search and Filter:** Implement a search bar and filters to quickly find tasks by title, tags, or status.- **Drag-and-Drop:** Enable drag-and-drop functionality to reorder tasks or move them between status columns (e.g., To Do â†’ In Progress).#### **3. Sidebar:**- Include a **sidebar** with the following sections:  - **Dashboard:** Overview of tasks (e.g., total tasks, completed tasks, overdue tasks).  - **Projects/Categories:** Allow users to group tasks into projects or categories.  - **Settings:** Options to toggle dark mode, edit profile, or configure notifications.  - **Help/Support:** Link to documentation or support.#### **4. Dark Mode Toggle:**- Implement a **dark mode toggle** in the sidebar or header that persists the user's preference using **localStorage**.- Ensure all components, including modals, buttons, and forms, adapt to the selected theme.#### **5. Additional Features:**- **Notifications:** Display notifications for upcoming due dates or overdue tasks.- **Responsive Design:** Ensure the system works flawlessly on desktop, tablet, and mobile devices.- **Animations:** Add subtle animations for task interactions (e.g., hover effects, task completion).- **Data Persistence:** Use **localStorage** or a mock API to persist tasks temporarily (optional: integrate with a backend later).#### **6. Code Quality:**- Use **TypeScript** to ensure type safety and improve code maintainability.- Follow best practices for **React.js** and **Next.js** (e.g., component reusability, proper state management).- Write clean, modular, and well-documented code.#### **7. Modern Layout:**- Use a **card-based layout** for tasks with clear visual hierarchy.- Include a **header** with a logo, user profile, and dark mode toggle.- Ensure the layout is visually balanced and easy to navigate.#### **8. Deliverables:**- A fully functional **Task Management System** with all the features mentioned above.- A **README.md** file with instructions on how to set up and run the project.- A **live demo** (if possible) hosted on a platform like Vercel or Netlify.---**Note:** Ensure the final product is polished, user-friendly, and adheres to modern web development standards. Use **Tailwind CSS** for rapid styling and **TypeScript** for robust code. Prioritize performance, accessibility, and responsiveness."